import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# T√≠tulo principal
st.title("Evaluaci√≥n de Riesgos en Miner√≠a ‚õèÔ∏è")

# Cargar el archivo Excel
try:
    df = pd.read_excel("riesgos_mineria_simulada.xlsx")
except FileNotFoundError:
    st.error("‚ö†Ô∏è No se encontr√≥ el archivo 'riesgos_mineria_simulada.xlsx'. Sube uno nuevo para continuar.")
    uploaded = st.file_uploader("Sube tu archivo Excel con los datos de riesgos", type=["xlsx"])
    if uploaded:
        df = pd.read_excel(uploaded)
        st.success("‚úÖ Archivo cargado correctamente.")
    else:
        st.stop()

# Verificar que el archivo tiene las columnas necesarias
if not {"√Årea", "Nivel de Riesgo", "Riesgo Cuantificado"}.issubset(df.columns):
    st.error("‚ö†Ô∏è El archivo no tiene las columnas requeridas: '√Årea', 'Nivel de Riesgo', 'Riesgo Cuantificado'.")
    st.stop()

# Secci√≥n de autenticaci√≥n para edici√≥n de datos
st.sidebar.subheader("üîê Acceso restringido")
password = st.sidebar.text_input("Ingresa la contrase√±a", type="password")

if password == "Riesgo2025":
    st.sidebar.success("Acceso concedido ‚úÖ")
    uploaded_file = st.sidebar.file_uploader("üì§ Subir nuevo archivo Excel", type=["xlsx"])
    if uploaded_file:
        df = pd.read_excel(uploaded_file)
        df.to_excel("riesgos_mineria_simulada.xlsx", index=False)
        st.sidebar.success("‚úÖ Archivo reemplazado exitosamente.")
else:
    if password != "":
        st.sidebar.error("Contrase√±a incorrecta ‚ùå")

# Seleccionar el √°rea
area_seleccionada = st.selectbox("Selecciona un √°rea para analizar:", sorted(df["√Årea"].unique()))

# Filtrar datos del √°rea seleccionada
df_area = df[df["√Årea"] == area_seleccionada]

if df_area.empty:
    st.warning("No hay datos para esta √°rea.")
    st.stop()

# Calcular el nivel de riesgo promedio
riesgo_promedio = df_area["Riesgo Cuantificado"].mean()

# Clasificar el nivel de riesgo
if riesgo_promedio < 4:
    nivel = "Bajo üü¢"
elif 4 <= riesgo_promedio < 7:
    nivel = "Medio üü°"
else:
    nivel = "Alto üî¥"

# Mostrar resultados
st.subheader(f"üìä Resultados para el √°rea: {area_seleccionada}")
st.metric(label="Nivel de Riesgo Cualitativo", value=nivel)
st.metric(label="Nivel de Riesgo Cuantificado", value=round(riesgo_promedio, 2))

# Crear gr√°fico circular con los porcentajes de riesgo por √°rea
st.subheader("Distribuci√≥n de Riesgos por √Årea (%)")

fig, ax = plt.subplots()
porcentajes = df.groupby("√Årea")["Riesgo Cuantificado"].mean()
ax.pie(porcentajes, labels=porcentajes.index, autopct='%1.1f%%', startangle=90)
ax.axis("equal")  # Hace que el gr√°fico sea un c√≠rculo perfecto
st.pyplot(fig)

# Mostrar tabla de datos del √°rea seleccionada
st.subheader("üìã Datos del √Årea Seleccionada")
st.dataframe(df_area)
